import lxml.etree as ET
import sys
import os

def main(module):
	# default platform
	plat = "ros2"

	# map the datatypes
	global dataTypes
	dataTypes = {}
	cwd = os.getcwd()
	dataTree = ET.parse(cwd+"/models/dataMapping.xml")
	dataRoot = dataTree.getroot()

	# check for the platform
	if any(platform.attrib.get("name") == plat for platform in dataRoot):
		for platform in dataRoot.iter("platform"):
			if platform.attrib.get("name") == plat:
				for type in platform.iter("type"):
					dataTypes[type.attrib.get("name")] = type.attrib.get("value")
	else:
		print "Chosen platform doesn't exist"
		sys.exit(1)

	# parse the templates necessary for the package
	os.chdir("templates")
	with open('package.txt', 'r') as myfile:
		pkg=myfile.read()

	# insert the package's name and description in package.xml's content
	pkg = pkg.replace("%PKGNAME%", "hrim_"+module.type+"_"+module.name+"_msgs")
	pkg = pkg.replace("%PKGDESC%", module.desc)

	with open('cmake.txt', 'r') as myfile:
		makeFile=myfile.read()

	# insert the package's name and description in CMakeLists.txt's content
	makeFile = makeFile.replace("%PKGNAME%", "hrim_"+module.type+"_"+module.name+"_msgs")

	os.chdir(cwd)

	# if the container directory for the generated module doesn't exist, create it
	if not os.path.exists(cwd+"/generated"):
			os.mkdir("generated")
	os.chdir("generated")
	cwd = os.getcwd()

	# if the module directory for the generated files doesn't exist, create it
	if not os.path.exists(cwd+"/"+module.name):
		os.mkdir(module.name)

	os.chdir(module.name)
	cwd = os.getcwd()

	# list of files for CMakeLists.txt
	msgFiles = ""

	# for each topic of the module
	for topic in module.topics:

		# reposition ourselves for each topic
		os.chdir(cwd)

		# check if the file is to be generated by checking the origin
		if len(topic.origin)==0:

			# package folder naming
			folderPath = os.getcwd()+"/hrim_"+module.type+"_"+module.name+"_msgs/msg"

			# if the package directories don't exist, create them
			if not os.path.exists(folderPath):
				os.makedirs(folderPath)

			# position ourselves on the package's msg folder
			os.chdir(folderPath)
			msg = ""

			# check for an overall message description
			if topic.desc is not None and len(topic.desc)>0:
				msg+="# "+topic.desc+"\n\n"

			for prop in topic.properties:

				# check for enumeration types
				if prop.unit is not None and prop.unit == "enum":

					# sort enumeration values for readability
					for value in sorted( ((v,k) for k,v in prop.enumeration.iteritems())):
						msg+=prop.type+" "+value[1]+"="+str(value[0])+"\n"

				# process each property, checking if it's value is an array and if it has any description
				msg+=dataTypes[prop.type]+("[{}] ".format(prop.length) if prop.array else " ")+prop.name+((" # "+prop.desc) if prop.desc is not None else "")+"\n\n"

			# generate each .msg file
			filepath = topic.name.title()+".msg"
			text_file = open(filepath, "w")
			text_file.write(msg)
			text_file.close()

			# add the .msg name to the list
			msgFiles+="\t\"msg/"+filepath+"\"\n"

	# insert the .msg list in the CMakeLists.txt
	makeFile = makeFile.replace("%PKGFILES%", msgFiles[:-1])

	# reposition ourselves on the package's root
	os.chdir(folderPath[:-4])

	# generate the package.xml file
	package = open("package.xml", "w")
	package.write(pkg)
	package.close()

	# generate the CMakeLists.txt file
	cmake = open("CMakeLists.txt", "w")
	cmake.write(makeFile)
	cmake.close()

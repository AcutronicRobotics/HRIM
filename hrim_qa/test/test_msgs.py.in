import re
import unittest
import sys
import launch
import launch.actions
import launch.event_handlers.on_process_start

import launch_ros.actions
import launch_ros.events
import launch_ros.events.lifecycle

import launch_testing
import launch_testing.asserts

HRIM_PKG = "@HRIM_PACKAGE@"
HRIM_MSGS = "@HRIM_MSG@"

@launch_testing.parametrize('args', [[HRIM_PKG, HRIM_MSGS, 'hrim']])
def generate_test_description(args, ready_fn):
    talker_node = launch_ros.actions.Node(
        package='hrim_qa', node_executable='publisher_py.py',
        output='screen', arguments=args
    )
    listener_node = launch_ros.actions.Node(
        package='hrim_qa', node_executable='subscriber_py.py',
        output='screen', arguments=args
    )
    return launch.LaunchDescription([listener_node, talker_node,
        launch.actions.OpaqueFunction(function=lambda context: ready_fn()),
          ]), locals()

class TestLifecyclePubSub(unittest.TestCase):

    def test_talker_lifecycle(self, proc_info, proc_output, listener_node, talker_node):
        """Test lifecycle talker."""
        proc_output.assertWaitFor('talker: beginning loop', process=talker_node, timeout=10)
        pattern = re.compile(r'publishing message #\d+')
        proc_output.assertWaitFor(
            expected_output=pattern, process=talker_node, timeout=10
        )
        proc_output.assertWaitFor(
            'subscriber: beginning loop', process=listener_node, timeout=10
        )
        pattern = re.compile(r'received message #\d+ of 1')
        proc_output.assertWaitFor(
            expected_output=pattern, process=listener_node, timeout=10
        )


# @launch_testing.post_shutdown_test()
# class TestShutdown(unittest.TestCase):
#
#     def test_talker_graceful_shutdown(self, proc_info, talker_node):
#         """Test lifecycle talker graceful shutdown."""
#         launch_testing.asserts.assertExitCodes(proc_info, process=talker_node)
#
#     def test_listener_graceful_shutdown(self, proc_info, listener_node):
#         """Test lifecycle talker graceful shutdown."""
#         launch_testing.asserts.assertExitCodes(proc_info, process=listener_node)

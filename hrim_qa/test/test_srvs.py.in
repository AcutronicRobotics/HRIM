import re
import unittest

import launch
import launch.actions
import launch.event_handlers.on_process_start

import launch_ros.actions
import launch_ros.events
import launch_ros.events.lifecycle

import launch_testing
import launch_testing.asserts

HRIM_PKG = "@HRIM_PACKAGE@"
HRIM_MSGS = "@HRIM_MSG@"

@launch_testing.parametrize('args', [[HRIM_PKG, HRIM_MSGS, 'hrim']])
def generate_test_description(args, ready_fn):
    requester_node = launch_ros.actions.Node(
        package='hrim_qa', node_executable='requester_py.py',
        output='screen', arguments=args
    )
    replier_node = launch_ros.actions.Node(
        package='hrim_qa', node_executable='replier_py.py',
        output='screen', arguments=args
    )
    return launch.LaunchDescription([
        requester_node, replier_node,
            launch.actions.OpaqueFunction(function=lambda context: ready_fn()),
        ]), locals()

class TestLifecyclePubSub(unittest.TestCase):

    def test_talker_lifecycle(self, proc_info, proc_output, requester_node, replier_node):
        """Test lifecycle talker."""
        proc_output.assertWaitFor('requester: beginning request', process=requester_node, timeout=5)
        pattern = re.compile(r'received reply #\d+ of 1')
        proc_output.assertWaitFor(
            expected_output=pattern, process=requester_node, timeout=5
        )
        proc_output.assertWaitFor('replier: beginning loop', process=replier_node, timeout=5)
        pattern = re.compile(r'received request #\d+ of 1')
        proc_output.assertWaitFor(
            expected_output=pattern, process=replier_node, timeout=5
        )

@launch_testing.post_shutdown_test()
class TestShutdown(unittest.TestCase):

    def test_requester_graceful_shutdown(self, proc_info, requester_node):
        """Test lifecycle talker graceful shutdown."""
        launch_testing.asserts.assertExitCodes(proc_info, process=requester_node)
    def test_replier_graceful_shutdown(self, proc_info, replier_node):
        """Test lifecycle talker graceful shutdown."""
        launch_testing.asserts.assertExitCodes(proc_info, process=replier_node)
